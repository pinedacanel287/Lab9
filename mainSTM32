/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim7;

UART_HandleTypeDef huart1;

/* USER CODE BEGIN PV */
uint8_t ultimo_t = 0;
uint8_t anterior_t = 0;
uint8_t boton = 0;
uint8_t val_pot1 = 0;
uint8_t val_pot2 = 0;
uint8_t val_7seg = 0;
uint8_t Buffer[0];
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_TIM3_Init(void);
static void MX_TIM7_Init(void);
/* USER CODE BEGIN PFP */
void Imprimir7seg(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
    ultimo_t = HAL_GetTick();
    if (ultimo_t - anterior_t > 250) { //Condición para quitar el debounce de los botón
        if (GPIO_Pin == pot_1_Pin) {
            boton = 1;
            val_pot1=7;
        } else if (GPIO_Pin == pot_2_Pin) {
            boton = 2;
            val_pot2=11;
        } //If y ELSE IF para diferenciar el botón que es presionado en la interrupción
        anterior_t = ultimo_t;
    }
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  MX_TIM3_Init();
  MX_TIM7_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
  HAL_TIM_Base_Start_IT(&htim7);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  val_7seg = val_pot1; //el valor guardado del potenciómetro 1 entra a la variable del 7 segmentos
	  HAL_GPIO_WritePin(seg_1_GPIO_Port, seg_1_Pin, 1);
	  HAL_GPIO_WritePin(seg_2_GPIO_Port, seg_2_Pin, 0); //Alterna para controlar el potenciómetro 1
	  Imprimir7seg(); //Imprime el valor en el display
	  HAL_Delay(10); //Delay entre el intercambio del display
	  val_7seg = val_pot2; //el valor guardado del potenciómetro 2 entra a la variable del 7 segmentos
	  HAL_GPIO_WritePin(seg_1_GPIO_Port, seg_1_Pin, 0);
	  HAL_GPIO_WritePin(seg_2_GPIO_Port, seg_2_Pin, 1); //Alterna para controlar el potenciómetro 2
	  Imprimir7seg(); //Imprime el valor en el display
	  HAL_Delay(10); //Delay entre el intercambio del display
	  if (boton == 1) {
		  uint8_t Inter = 1; //Define la variable que se envía para el ESP32
		  HAL_UART_Transmit(&huart1, &Inter, sizeof(Inter), HAL_MAX_DELAY); //Envía el dato que es enviado
		  HAL_Delay(10); //Delay para que el ESP lea el potenciómetro y se vuelva a comunicar
		  HAL_UART_Receive(&huart1, Buffer, sizeof(Buffer), HAL_MAX_DELAY); //Recive el dato del ESP32
		  val_pot1 = Buffer[0]; //Guarda el valor del buffer en la variable val_pot1
		  boton = 0; //Regresa el boton a 0
	  } else if (boton == 2) {
		  uint8_t Inter = 2; //Define la variable que se envía para el ESP32
		  HAL_UART_Transmit(&huart1, &Inter, sizeof(Inter), HAL_MAX_DELAY); //Envía el dato que es enviado
		  HAL_Delay(10); //Delay para que el ESP lea el potenciómetro y se vuelva a comunicar
		  HAL_UART_Receive(&huart1, Buffer, sizeof(Buffer), HAL_MAX_DELAY); //Recive el dato del ESP32
		  val_pot2 = Buffer[0]; //Guarda el valor del buffer en la variable val_pot2
		  boton = 0; //Regresa el boton a 0
	  }
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 0;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 50000;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}

/**
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
  htim7.Init.Prescaler = 0;
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim7.Init.Period = 50000;
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, seg_1_Pin|seg_2_Pin|seg_a_Pin|seg_d_Pin
                          |seg_c_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, seg_e_Pin|seg_f_Pin|seg_g_Pin|seg_b_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : seg_1_Pin seg_2_Pin seg_a_Pin seg_d_Pin
                           seg_c_Pin */
  GPIO_InitStruct.Pin = seg_1_Pin|seg_2_Pin|seg_a_Pin|seg_d_Pin
                          |seg_c_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : seg_e_Pin seg_f_Pin seg_g_Pin */
  GPIO_InitStruct.Pin = seg_e_Pin|seg_f_Pin|seg_g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : pot_2_Pin */
  GPIO_InitStruct.Pin = pot_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(pot_2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : pot_1_Pin */
  GPIO_InitStruct.Pin = pot_1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(pot_1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : seg_b_Pin */
  GPIO_InitStruct.Pin = seg_b_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(seg_b_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void Imprimir7seg(void) {
	switch (val_7seg) { //Evalúa únicamente el valor de la variable val_7seg
		case 0:
			HAL_GPIO_WritePin(seg_a_GPIO_Port, seg_a_Pin, 1); //Imprimir el valor de 0
			HAL_GPIO_WritePin(seg_b_GPIO_Port, seg_b_Pin, 1);
			HAL_GPIO_WritePin(seg_c_GPIO_Port, seg_c_Pin, 1);
			HAL_GPIO_WritePin(seg_d_GPIO_Port, seg_d_Pin, 1);
			HAL_GPIO_WritePin(seg_e_GPIO_Port, seg_e_Pin, 1);
			HAL_GPIO_WritePin(seg_f_GPIO_Port, seg_f_Pin, 1);
			HAL_GPIO_WritePin(seg_g_GPIO_Port, seg_g_Pin, 0);
			break;
		case 1:
			HAL_GPIO_WritePin(seg_a_GPIO_Port, seg_a_Pin, 0); //Imprimir el valor de 1
			HAL_GPIO_WritePin(seg_b_GPIO_Port, seg_b_Pin, 1);
			HAL_GPIO_WritePin(seg_c_GPIO_Port, seg_c_Pin, 1);
			HAL_GPIO_WritePin(seg_d_GPIO_Port, seg_d_Pin, 0);
			HAL_GPIO_WritePin(seg_e_GPIO_Port, seg_e_Pin, 0);
			HAL_GPIO_WritePin(seg_f_GPIO_Port, seg_f_Pin, 0);
			HAL_GPIO_WritePin(seg_g_GPIO_Port, seg_g_Pin, 0);
		case 2:
			HAL_GPIO_WritePin(seg_a_GPIO_Port, seg_a_Pin, 1); //Imprimir el valor de 2
			HAL_GPIO_WritePin(seg_b_GPIO_Port, seg_b_Pin, 1);
			HAL_GPIO_WritePin(seg_c_GPIO_Port, seg_c_Pin, 0);
			HAL_GPIO_WritePin(seg_d_GPIO_Port, seg_d_Pin, 1);
			HAL_GPIO_WritePin(seg_e_GPIO_Port, seg_e_Pin, 1);
			HAL_GPIO_WritePin(seg_f_GPIO_Port, seg_f_Pin, 0);
			HAL_GPIO_WritePin(seg_g_GPIO_Port, seg_g_Pin, 1);
		case 3:
			HAL_GPIO_WritePin(seg_a_GPIO_Port, seg_a_Pin, 1); //Imprimir el valor de 3
			HAL_GPIO_WritePin(seg_b_GPIO_Port, seg_b_Pin, 1);
			HAL_GPIO_WritePin(seg_c_GPIO_Port, seg_c_Pin, 1);
			HAL_GPIO_WritePin(seg_d_GPIO_Port, seg_d_Pin, 1);
			HAL_GPIO_WritePin(seg_e_GPIO_Port, seg_e_Pin, 0);
			HAL_GPIO_WritePin(seg_f_GPIO_Port, seg_f_Pin, 0);
			HAL_GPIO_WritePin(seg_g_GPIO_Port, seg_g_Pin, 1);
		case 4:
			HAL_GPIO_WritePin(seg_a_GPIO_Port, seg_a_Pin, 0); //Imprimir el valor de 4
			HAL_GPIO_WritePin(seg_b_GPIO_Port, seg_b_Pin, 1);
			HAL_GPIO_WritePin(seg_c_GPIO_Port, seg_c_Pin, 1);
			HAL_GPIO_WritePin(seg_d_GPIO_Port, seg_d_Pin, 0);
			HAL_GPIO_WritePin(seg_e_GPIO_Port, seg_e_Pin, 0);
			HAL_GPIO_WritePin(seg_f_GPIO_Port, seg_f_Pin, 1);
			HAL_GPIO_WritePin(seg_g_GPIO_Port, seg_g_Pin, 1);
		case 5:
			HAL_GPIO_WritePin(seg_a_GPIO_Port, seg_a_Pin, 1); //Imprimir el valor de 5
			HAL_GPIO_WritePin(seg_b_GPIO_Port, seg_b_Pin, 0);
			HAL_GPIO_WritePin(seg_c_GPIO_Port, seg_c_Pin, 1);
			HAL_GPIO_WritePin(seg_d_GPIO_Port, seg_d_Pin, 1);
			HAL_GPIO_WritePin(seg_e_GPIO_Port, seg_e_Pin, 0);
			HAL_GPIO_WritePin(seg_f_GPIO_Port, seg_f_Pin, 1);
			HAL_GPIO_WritePin(seg_g_GPIO_Port, seg_g_Pin, 1);
		case 6:
			HAL_GPIO_WritePin(seg_a_GPIO_Port, seg_a_Pin, 1); //Imprimir el valor de 6
			HAL_GPIO_WritePin(seg_b_GPIO_Port, seg_b_Pin, 0);
			HAL_GPIO_WritePin(seg_c_GPIO_Port, seg_c_Pin, 1);
			HAL_GPIO_WritePin(seg_d_GPIO_Port, seg_d_Pin, 1);
			HAL_GPIO_WritePin(seg_e_GPIO_Port, seg_e_Pin, 1);
			HAL_GPIO_WritePin(seg_f_GPIO_Port, seg_f_Pin, 1);
			HAL_GPIO_WritePin(seg_g_GPIO_Port, seg_g_Pin, 1);
		case 7:
			HAL_GPIO_WritePin(seg_a_GPIO_Port, seg_a_Pin, 1); //Imprimir el valor de 7
			HAL_GPIO_WritePin(seg_b_GPIO_Port, seg_b_Pin, 1);
			HAL_GPIO_WritePin(seg_c_GPIO_Port, seg_c_Pin, 1);
			HAL_GPIO_WritePin(seg_d_GPIO_Port, seg_d_Pin, 0);
			HAL_GPIO_WritePin(seg_e_GPIO_Port, seg_e_Pin, 0);
			HAL_GPIO_WritePin(seg_f_GPIO_Port, seg_f_Pin, 0);
			HAL_GPIO_WritePin(seg_g_GPIO_Port, seg_g_Pin, 0);
		case 8:
			HAL_GPIO_WritePin(seg_a_GPIO_Port, seg_a_Pin, 1); //Imprimir el valor de 8
			HAL_GPIO_WritePin(seg_b_GPIO_Port, seg_b_Pin, 1);
			HAL_GPIO_WritePin(seg_c_GPIO_Port, seg_c_Pin, 1);
			HAL_GPIO_WritePin(seg_d_GPIO_Port, seg_d_Pin, 1);
			HAL_GPIO_WritePin(seg_e_GPIO_Port, seg_e_Pin, 1);
			HAL_GPIO_WritePin(seg_f_GPIO_Port, seg_f_Pin, 1);
			HAL_GPIO_WritePin(seg_g_GPIO_Port, seg_g_Pin, 1);
		case 9:
			HAL_GPIO_WritePin(seg_a_GPIO_Port, seg_a_Pin, 1); //Imprimir el valor de 9
			HAL_GPIO_WritePin(seg_b_GPIO_Port, seg_b_Pin, 1);
			HAL_GPIO_WritePin(seg_c_GPIO_Port, seg_c_Pin, 1);
			HAL_GPIO_WritePin(seg_d_GPIO_Port, seg_d_Pin, 0);
			HAL_GPIO_WritePin(seg_e_GPIO_Port, seg_e_Pin, 0);
			HAL_GPIO_WritePin(seg_f_GPIO_Port, seg_f_Pin, 1);
			HAL_GPIO_WritePin(seg_g_GPIO_Port, seg_g_Pin, 1);
		case 10:
			HAL_GPIO_WritePin(seg_a_GPIO_Port, seg_a_Pin, 1); //Imprimir el valor de A
			HAL_GPIO_WritePin(seg_b_GPIO_Port, seg_b_Pin, 1);
			HAL_GPIO_WritePin(seg_c_GPIO_Port, seg_c_Pin, 1);
			HAL_GPIO_WritePin(seg_d_GPIO_Port, seg_d_Pin, 0);
			HAL_GPIO_WritePin(seg_e_GPIO_Port, seg_e_Pin, 1);
			HAL_GPIO_WritePin(seg_f_GPIO_Port, seg_f_Pin, 1);
			HAL_GPIO_WritePin(seg_g_GPIO_Port, seg_g_Pin, 1);
		case 11:
			HAL_GPIO_WritePin(seg_a_GPIO_Port, seg_a_Pin, 0); //Imprimir el valor de b
			HAL_GPIO_WritePin(seg_b_GPIO_Port, seg_b_Pin, 0);
			HAL_GPIO_WritePin(seg_c_GPIO_Port, seg_c_Pin, 1);
			HAL_GPIO_WritePin(seg_d_GPIO_Port, seg_d_Pin, 1);
			HAL_GPIO_WritePin(seg_e_GPIO_Port, seg_e_Pin, 1);
			HAL_GPIO_WritePin(seg_f_GPIO_Port, seg_f_Pin, 1);
			HAL_GPIO_WritePin(seg_g_GPIO_Port, seg_g_Pin, 1);
		case 12:
			HAL_GPIO_WritePin(seg_a_GPIO_Port, seg_a_Pin, 1); //Imprimir el valor de C
			HAL_GPIO_WritePin(seg_b_GPIO_Port, seg_b_Pin, 0);
			HAL_GPIO_WritePin(seg_c_GPIO_Port, seg_c_Pin, 0);
			HAL_GPIO_WritePin(seg_d_GPIO_Port, seg_d_Pin, 1);
			HAL_GPIO_WritePin(seg_e_GPIO_Port, seg_e_Pin, 1);
			HAL_GPIO_WritePin(seg_f_GPIO_Port, seg_f_Pin, 1);
			HAL_GPIO_WritePin(seg_g_GPIO_Port, seg_g_Pin, 0);
		case 13:
			HAL_GPIO_WritePin(seg_a_GPIO_Port, seg_a_Pin, 0); //Imprimir el valor de d
			HAL_GPIO_WritePin(seg_b_GPIO_Port, seg_b_Pin, 1);
			HAL_GPIO_WritePin(seg_c_GPIO_Port, seg_c_Pin, 1);
			HAL_GPIO_WritePin(seg_d_GPIO_Port, seg_d_Pin, 1);
			HAL_GPIO_WritePin(seg_e_GPIO_Port, seg_e_Pin, 1);
			HAL_GPIO_WritePin(seg_f_GPIO_Port, seg_f_Pin, 0);
			HAL_GPIO_WritePin(seg_g_GPIO_Port, seg_g_Pin, 1);
		case 14:
			HAL_GPIO_WritePin(seg_a_GPIO_Port, seg_a_Pin, 1); //Imprimir el valor de E
			HAL_GPIO_WritePin(seg_b_GPIO_Port, seg_b_Pin, 0);
			HAL_GPIO_WritePin(seg_c_GPIO_Port, seg_c_Pin, 0);
			HAL_GPIO_WritePin(seg_d_GPIO_Port, seg_d_Pin, 1);
			HAL_GPIO_WritePin(seg_e_GPIO_Port, seg_e_Pin, 1);
			HAL_GPIO_WritePin(seg_f_GPIO_Port, seg_f_Pin, 1);
			HAL_GPIO_WritePin(seg_g_GPIO_Port, seg_g_Pin, 1);
		case 15:
			HAL_GPIO_WritePin(seg_a_GPIO_Port, seg_a_Pin, 1); //Imprimir el valor de F
			HAL_GPIO_WritePin(seg_b_GPIO_Port, seg_b_Pin, 0);
			HAL_GPIO_WritePin(seg_c_GPIO_Port, seg_c_Pin, 0);
			HAL_GPIO_WritePin(seg_d_GPIO_Port, seg_d_Pin, 0);
			HAL_GPIO_WritePin(seg_e_GPIO_Port, seg_e_Pin, 1);
			HAL_GPIO_WritePin(seg_f_GPIO_Port, seg_f_Pin, 1);
			HAL_GPIO_WritePin(seg_g_GPIO_Port, seg_g_Pin, 1);
			break;
		default:
			break;
	}
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
